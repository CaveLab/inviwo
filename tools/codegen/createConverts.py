typedefs = [];
registersToString = [];
registersOrdinal = [];



def createRegisterScalar(props):
    for src in props:
        registersToString.append("registerPropertyConverter(util::make_unique<ScalarToStringConverter<%s>>());" % (src))
        for dst in props:
            if src != dst:
                typedefs.append("typedef OrdinalPropertyConverter<%s, %s> %sTo%sConverter;" % (src , dst,src , dst))
                registersOrdinal.append("registerPropertyConverter(util::make_unique<%sTo%sConverter>());" % (src , dst))


def createRegisterVector(props):
    for src in props:
        registersToString.append("registerPropertyConverter(util::make_unique<VectorToStringConverter<%s>>());" % (src))
        for dst in props:
            if src != dst:
                typedefs.append("typedef OrdinalPropertyConverter<%s, %s> %sTo%sConverter;" % (src , dst,src , dst))
                registersOrdinal.append("registerPropertyConverter(util::make_unique<%sTo%sConverter>());" % (src , dst))



scalar_properties = ["FloatProperty","IntProperty","Int64Property", "IntSizeTProperty", "DoubleProperty"];
vec2_properties = ["FloatVec2Property","DoubleVec2Property","IntVec2Property", "IntSize2Property"];
vec3_properties = ["FloatVec3Property","DoubleVec3Property","IntVec3Property", "IntSize3Property"];
vec4_properties = ["FloatVec4Property","DoubleVec4Property","IntVec4Property", "IntSize4Property"];

mat4_properties = [""]


createRegisterScalar(scalar_properties);
createRegisterVector(vec2_properties);
createRegisterVector(vec3_properties);
createRegisterVector(vec4_properties);

f = open('createconverters.cpp','w')
f.write('// START OF AUTOGENERATED CODE \n')
f.write('// The following code has been autogenerated using createconverters.py \n')


for t in typedefs:
    f.write(t);
    f.write('\n');
f.write('\n');

for r in registersToString:
    f.write(r);
    f.write('\n');
f.write('\n');

for r in registersOrdinal:
    f.write(r);
    f.write('\n');
f.write('\n');

f.write('// END OF AUTOGENERATED CODE \n')
f.close()
