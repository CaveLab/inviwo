if(IVW_QT_APPLICATION AND NOT IVW_QT_EDITOR)
    set(IVW_QT_EDITOR ON CACHE BOOL "Build Inviwo Qt Editor" FORCE)
    ivw_message("IVW_QT_EDITOR was set to build, due to dependency towards IVW_QT_APPLICATION")
endif()

if(IVW_QT_EDITOR AND NOT IVW_QT_WIDGETS)
    set(IVW_QT_WIDGETS ON CACHE BOOL "Build Inviwo Qt Widgets" FORCE)
    ivw_message("IVW_QT_WIDGETS was set to build, due to dependency towards IVW_QT_EDITOR")
endif()

if(IVW_QT_EDITOR OR IVW_QT_WIDGETS)
    if(NOT QT_QMAKE_EXECUTABLE)
        find_program(QT_QMAKE_EXECUTABLE_FINDQT NAMES qmake qmake4 qmake-qt4 qmake5 qmake-qt5
               PATHS "${QT_SEARCH_PATH}/bin" "$ENV{QTDIR}/bin")
        set(QT_QMAKE_EXECUTABLE ${QT_QMAKE_EXECUTABLE_FINDQT} CACHE PATH "Qt qmake program.")
    endif(NOT QT_QMAKE_EXECUTABLE)

    if(QT_QMAKE_EXECUTABLE)
        exec_program(${QT_QMAKE_EXECUTABLE} ARGS "-query QT_VERSION" OUTPUT_VARIABLE QTVERSION)
        if(QTVERSION MATCHES "4.*")
            set(QT4_INSTALLED TRUE)
        endif(QTVERSION MATCHES "4.*")
        if(QTVERSION MATCHES "5.*")
            set(QT5_INSTALLED TRUE)
        endif(QTVERSION MATCHES "5.*")
    endif(QT_QMAKE_EXECUTABLE)

    if(NOT DESIRED_QT_VERSION)
        if(QT4_INSTALLED AND QT5_INSTALLED)
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5. Choose either 4 or 5")
        elseif(QT4_INSTALLED)
            set(DESIRED_QT_VERSION 4 CACHE STRING "Desired Qt version set to 4 as only this supported version was found")
        elseif(QT5_INSTALLED)
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5 as only this supported version was found")
        else()
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5, but either qt 4 or 5 was found on the system")
        endif()
    endif(NOT DESIRED_QT_VERSION)
   
    if(DESIRED_QT_VERSION MATCHES 5)
        string(FIND "${CMAKE_PREFIX_PATH}" qt5 hasqt) #Skip if qt is already in CMAKE_PREFIX_PATH
        if(NOT ${hasqt} GREATER 0) 
            if(WIN32)
                if(QT_QMAKE_EXECUTABLE)
                    string(REGEX REPLACE "bin\\\\qmake([^ ]*)$" "lib\\\\cmake" QT5_PATH "${QT_QMAKE_EXECUTABLE}")
                endif()
            elseif(APPLE)
                if(EXISTS "/usr/local/Cellar/qt5")
                    file(GLOB qtversions RELATIVE "/usr/local/Cellar/qt5/" "/usr/local/Cellar/qt5/?.?.?")
                    list(LENGTH qtversions len)
                    if(${len} GREATER 0)
                        list(GET qtversions -1 qtlatest)
                        if(EXISTS "/usr/local/Cellar/qt5/${qtlatest}")   
                            set(QT5_PATH "/usr/local/Cellar/qt5/${qtlatest}")          
                        endif()
                     endif()
                endif()
            else()
                if(QT_QMAKE_EXECUTABLE)
                    string(REGEX REPLACE "bin/qmake([^ ]*)$" "lib/cmake" QT5_PATH "${QT_QMAKE_EXECUTABLE}")
                endif()
            endif()
    
            if(QT5_PATH)
                ivw_debug_message(STATUS "Found qt at: ${QT5_PATH}") 
                list(APPEND CMAKE_PREFIX_PATH ${QT5_PATH}) 
                set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} PARENT_SCOPE)
            endif()
        endif()
    else()
        set(QT_USE_QTOPENGL TRUE)
    endif()

    if(IVW_PACKAGE_PROJECT)
        find_package(Qt5Core QUIET)
        if(WIN32 AND Qt5Core_FOUND)
            set(QT_BINARY_DIR "${Qt5Core_DIR}/../../../bin")
            install(FILES ${QT_BINARY_DIR}/Qt5CLucene${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_modules CONFIGURATIONS Debug)
            install(FILES ${QT_BINARY_DIR}/Qt5CLucene.dll DESTINATION bin COMPONENT qt_modules CONFIGURATIONS Release)
            install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icudt5*")
            install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icuin5*")
            install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icuuc5*")
            set(QT_PLUGINS_DIR "${Qt5Core_DIR}/../../../plugins")
            install(FILES ${QT_PLUGINS_DIR}/platforms/qwindows${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin/platforms COMPONENT qt_widgets CONFIGURATIONS Debug)
            install(FILES ${QT_PLUGINS_DIR}/platforms/qwindows.dll DESTINATION bin/platforms COMPONENT qt_widgets CONFIGURATIONS Release)
            install(FILES ${QT_PLUGINS_DIR}/sqldrivers/qsqlite${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin/sqldrivers COMPONENT qt_widgets CONFIGURATIONS Debug)
            install(FILES ${QT_PLUGINS_DIR}/sqldrivers/qsqlite.dll DESTINATION bin/sqldrivers COMPONENT qt_widgets CONFIGURATIONS Release)
        endif()
    endif()

    if(IVW_QT_WIDGETS)
        add_subdirectory(widgets)
    endif()

    if(IVW_QT_EDITOR)
        add_subdirectory(editor)
    endif()

    mark_as_advanced(CLEAR QT_MAKE_EXECUTABLE)    
    mark_as_advanced(CLEAR DESIRED_QT_VERSION)
    # Hide some options 
    mark_as_advanced(FORCE QT_QMAKE_EXECUTABLE)
    mark_as_advanced(FORCE Qt5Multimedia_DIR)
    mark_as_advanced(FORCE Qt5Network_DIR)
    mark_as_advanced(FORCE Qt5Script_DIR)
    mark_as_advanced(FORCE Qt5_DIR)
endif()