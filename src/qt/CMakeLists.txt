if(IVW_QT_APPLICATION AND NOT IVW_QT_EDITOR)
    set(IVW_QT_EDITOR ON CACHE BOOL "Build Inviwo Qt Editor" FORCE)
    ivw_message("IVW_QT_EDITOR was set to build, due to dependency towards IVW_QT_APPLICATION")
endif()

if(IVW_QT_EDITOR AND NOT IVW_QT_WIDGETS)
    set(IVW_QT_WIDGETS ON CACHE BOOL "Build Inviwo Qt Widgets" FORCE)
    ivw_message("IVW_QT_WIDGETS was set to build, due to dependency towards IVW_QT_EDITOR")
endif()

if(IVW_QT_EDITOR OR IVW_QT_WIDGETS)
    if(NOT QT_QMAKE_EXECUTABLE)
        find_program(QT_QMAKE_EXECUTABLE_FINDQT NAMES qmake qmake4 qmake-qt4 qmake5 qmake-qt5
               PATHS "${QT_SEARCH_PATH}/bin" "$ENV{QTDIR}/bin")
        set(QT_QMAKE_EXECUTABLE ${QT_QMAKE_EXECUTABLE_FINDQT} CACHE PATH "Qt qmake program.")
    endif(NOT QT_QMAKE_EXECUTABLE)

    if(QT_QMAKE_EXECUTABLE)
        exec_program(${QT_QMAKE_EXECUTABLE} ARGS "-query QT_VERSION" OUTPUT_VARIABLE QTVERSION)
        if(QTVERSION MATCHES "4.*")
            set(QT4_INSTALLED TRUE)
        endif(QTVERSION MATCHES "4.*")
        if(QTVERSION MATCHES "5.*")
            set(QT5_INSTALLED TRUE)
        endif(QTVERSION MATCHES "5.*")
    endif(QT_QMAKE_EXECUTABLE)

    if(NOT DESIRED_QT_VERSION)
        if(QT4_INSTALLED AND QT5_INSTALLED)
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5. Choose either 4 or 5")
        elseif(QT4_INSTALLED)
            set(DESIRED_QT_VERSION 4 CACHE STRING "Desired Qt version set to 4 as only this supported version was found")
        elseif(QT5_INSTALLED)
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5 as only this supported version was found")
        else()
            set(DESIRED_QT_VERSION 5 CACHE STRING "Desired Qt version set to 5, but either qt 4 or 5 was found on the system")
        endif()
    endif(NOT DESIRED_QT_VERSION)

    # Find the QtWidgets library
    if(DESIRED_QT_VERSION MATCHES 5)
        string(REGEX REPLACE "bin\\\\qmake([^ ]*)$" "lib\\\\cmake" QT5_PATH "${QT_QMAKE_EXECUTABLE}")
        set(CMAKE_PREFIX_PATH "${QT5_PATH}")
        find_package(Qt5Core QUIET REQUIRED)
        find_package(Qt5Gui QUIET REQUIRED)
        find_package(Qt5Widgets QUIET REQUIRED)
		find_package(Qt5Help QUIET REQUIRED)

        mark_as_advanced(FORCE QT_QMAKE_EXECUTABLE)
        mark_as_advanced(FORCE Qt5Multimedia_DIR)
        mark_as_advanced(FORCE Qt5Network_DIR)
        mark_as_advanced(FORCE Qt5Script_DIR)
        mark_as_advanced(FORCE Qt5_DIR)
        
        if(IVW_PACKAGE_PROJECT)
            if(WIN32)
                if(Qt5Core_FOUND)
                    set(QT_BINARY_DIR "${Qt5Core_DIR}/../../../bin")
					install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icudt5*")
					install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icuin5*")
					install(DIRECTORY ${QT_BINARY_DIR} DESTINATION bin/../ COMPONENT qt_widgets FILES_MATCHING PATTERN "icuuc5*")
                    install(FILES ${QT_BINARY_DIR}/Qt5Core${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_BINARY_DIR}/Qt5Core.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                    install(FILES ${QT_BINARY_DIR}/Qt5Gui${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_BINARY_DIR}/Qt5Gui.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                    install(FILES ${QT_BINARY_DIR}/Qt5Widgets${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_BINARY_DIR}/Qt5Widgets.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                    install(FILES ${QT_BINARY_DIR}/Qt5Widgets${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_BINARY_DIR}/Qt5Widgets.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                    install(FILES ${QT_BINARY_DIR}/Qt5Help${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_BINARY_DIR}/Qt5Help.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                    set(QT_PLUGINS_DIR "${Qt5Core_DIR}/../../../plugins")
                    install(FILES ${QT_PLUGINS_DIR}/platforms/qwindows${CMAKE_DEBUG_POSTFIX}.dll DESTINATION bin/platforms COMPONENT qt_widgets CONFIGURATIONS Debug)
                    install(FILES ${QT_PLUGINS_DIR}/platforms/qwindows.dll DESTINATION bin/platforms COMPONENT qt_widgets CONFIGURATIONS Release)
                endif()
            endif()
        endif()
    else()
        find_package(Qt QUIET REQUIRED)
        
        set(QT_DONT_USE_QTCORE FALSE)
        set(QT_DONT_USE_QTGUI FALSE)
		set(QT_DONT_USE_QTHELP FALSE)
        set(QT_USE_QT3SUPPORT FALSE)
        set(QT_USE_QTASSISTANT FALSE)
        set(QT_USE_QTDESIGNER FALSE)
        set(QT_USE_QTMOTIF FALSE)
        set(QT_USE_QTMAIN FALSE)
        set(QT_USE_QTNETWORK FALSE)
        set(QT_USE_QTNSPLUGIN FALSE)
        set(QT_USE_QTOPENGL FALSE)
        set(QT_USE_QTSQL FALSE)
        set(QT_USE_QTXML FALSE)
        set(QT_USE_QTSVG FALSE)
        set(QT_USE_QTTEST FALSE)
        set(QT_USE_QTUITOOLS FALSE)
        set(QT_USE_QTDBUS FALSE)
        set(QT_USE_QTSCRIPT FALSE)
        set(QT_USE_QTASSISTANTCLIENT FALSE)
        set(QT_USE_QTWEBKIT FALSE)
        set(QT_USE_QTXMLPATTERNS FALSE)
        set(QT_USE_PHONON FALSE)
        
        if(IVW_PACKAGE_PROJECT)
            if(WIN32)
                install(FILES ${QT_BINARY_DIR}/QtCore${CMAKE_DEBUG_POSTFIX}4.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                install(FILES ${QT_BINARY_DIR}/QtCore4.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
                install(FILES ${QT_BINARY_DIR}/QtGui${CMAKE_DEBUG_POSTFIX}4.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Debug)
                install(FILES ${QT_BINARY_DIR}/QtGui4.dll DESTINATION bin COMPONENT qt_widgets CONFIGURATIONS Release)
            endif()
        endif()
    endif()
    
    mark_as_advanced(CLEAR QT_MAKE_EXECUTABLE)
    
    mark_as_advanced(CLEAR DESIRED_QT_VERSION)
endif()

if(IVW_QT_WIDGETS)
    add_subdirectory(widgets)
endif()

if(IVW_QT_EDITOR)
    add_subdirectory(editor)
endif()

